[[!meta title="SSL certificates"]]
# Generating SSL certificates

We are able to obtain signed certificates at no charge through the campus [InCommon-Comodo certificate service](https://wikihub.berkeley.edu/display/calnet/CalNet+InCommon-Comodo+Certificate+Service).

## Generating key and CSR

Generate a private key (unencrypted, keep secure!) and certificate signing request (CSR). In this example, the certificate is for `rt.ocf.berkeley.edu` (Request Tracker).

    $ openssl req -newkey rsa:4096 -nodes -keyout rt_ocf_berkeley_edu.key -out rt_ocf_berkeley_edu.csr
    [...]
    Country Name (2 letter code) [AU]:US
    State or Province Name (full name) [Some-State]:California
    Locality Name (eg, city) []:Berkeley
    Organization Name (eg, company) [Internet Widgits Pty Ltd]:University of California at Berkeley
    Organizational Unit Name (eg, section) []:OCF
    Common Name (eg, YOUR name) []:rt.ocf.berkeley.edu 
    Email Address []:security@ocf.berkeley.edu
    
    Please enter the following 'extra' attributes
    to be sent with your certificate request
    A challenge password []:
    An optional company name []:

Leave the last two fields blank. Note that we're using a certificate for the service (`rt.ocf.berkeley.edu`) not the host the service runs (`typhoon.ocf.berkeley.edu`), which may change after an infrastructure rebuild.

Some of our services may require Subject Alternative Names (for example, in the case of the Common Name `www.ocf.berkeley.edu`, you would probably `ocf.berkeley.edu` and `secure.ocf.berkeley.edu` listed in the same certificate). It's less hassle to add the alternative names in the next step rather than in the CSR.

## Installing certificate

Currently, at least one staff member is a Departmental Certificate Administrator (DCA), who is trained to request certificates in the [InCommon Certificate Manager](https://cert-manager.com/customer/incommon) directly. Otherwise, follow the [InCommon-Comodo certificate service](https://wikihub.berkeley.edu/display/calnet/CalNet+InCommon-Comodo+Certificate+Service) instructions to request them from IST. Be sure to request Subject Alternative Names if needed.

We are interested in two certificate files that InCommon provides: "X.509 Certificate only" and "X.509 Intermediate(s)/Root". Unfortunately, "X.509 Base64" (certificate bundle) is currently in the reverse order (root/intermediate/certificate), so don't use it.

To set up SSL, we need:

 * private key (which we generated and keep secret)
 * certificate (which InCommon generated using our CSR, called "X.509 Certificate only")
 * intermediate CA(s) (currently "InCommon Server CA", included as part of "X.509 Intermediate(s)/Root"): trust path from the certificate to a root CA

In Debian, root CAs are installed in `/etc/ssl/certs`. We don't need the root CA because it is included with operating systems and browsers. If you do include it, it will send some unnecessary bytes to SSL clients, but otherwise it is not an issue. You can remove the root CA by editing the "X.509 Intermediate(s)/Root" in a text editor and deleting the last certificate block.

In Apache VirtualHost lingo,

 * `SSLCertificateKeyFile`: private key
 * `SSLCertificateFile`: certificate
 * `SSLCertificateChainFile`: intermediate CA(s)

For simplicity, you can point `SSLCertificateFile` and `SSLCertificateChainFile` to the same file if it includes the certificate and the intermediate CA(s), in that order. Simply concatenate the certificate files together.

Use restrictive permissions on the private key (e.g., `chown root:root`, `chmod 600`) -- Apache will read the private key as root before dropping privileges. Other daemon users may need to be added to the ssl-cert group and the private key be readable by that group (e.g., `chown root:ssl-cert`, `chmod 640`).

### Verifying certificate

For the host `rt.ocf.berkeley.edu` on port 443 (HTTPS), try connecting using the OpenSSL client.

    openssl s_client -CApath /etc/ssl/certs -connect rt.ocf.berkeley.edu:443

The last line of the SSL session information should have a zero return code. This only verifies the certificate, not that the hostname you entered matches the Common Name or Subject Alternatives Names on the certificate.

Good:

    Verify return code: 0 (ok)

Bad example 1:

    Verify return code: 18 (self signed certificate)

The default self-signed certificate, not the one obtained through InCommon, is probably still being used.

Bad example 2:

    Verify return code: 21 (unable to verify the first certificate)

The intermediate CA chain is probably missing (or in the wrong order), so there is no trust path to a root CA.
